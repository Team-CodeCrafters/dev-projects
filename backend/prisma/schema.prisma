generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(uuid())
  username        String        @unique
  password        String
  displayName     String?
  profilePicture  String?
  email           String        @unique
  admin           Admin?
  createdProjects Project[]
  startedProjects UserProject[]
  Bookmarks       Bookmarks[]
  Submissions     Submissions[]
}

model Admin {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String        @id @default(uuid())
  name        String        @unique
  about       String
  images      String[]
  requirement String[]
  difficulty  Difficulty
  challenges  String[]
  updatedAt   DateTime      @updatedAt
  createdAt   DateTime      @default(now())
  createdById String?
  domain      Domain
  tools       Tools[]
  user        User?         @relation(fields: [createdById], references: [id])
  project     UserProject[]
  Bookmarks   Bookmarks[]
  Submissions Submissions[]
}

model UserProject {
  id            String    @id @default(uuid())
  userId        String
  projectId     String
  status        Status
  estimatedTime DateTime?
  startedAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  completedAt   DateTime?
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([projectId])
  @@index([userId])
}

model Submissions {
  id          String   @id @default(uuid())
  userId      String
  projectId   String
  title       String
  githubRepo  String
  tools       String[]
  liveUrl     String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model Bookmarks {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

enum Status {
  started
  inprogress
  completed
}

enum Difficulty {
  Beginner
  Intermediate
  Expert
  Master
}

enum Tools {
  C
  Python
  Java
  React
  Node
  HTML
  CSS
  Javascript
  MongoDB
  PostgreSQL
  API
  Git
  React_Native
  Angular
  Vue
  Express
  Django
  Flask
  TensorFlow
  Scikit_Learn
  Pandas
  NumPy
  Kotlin
  Swift
  Firebase
  MySQL
  Docker
  AWS
  TypeScript
  GraphQL
}

enum Domain {
  Frontend
  Backend
  Web_Development
  App_Development
  AIML
  UIUX
  Full_Stack
  Blockchain
  Data_Science
  Cloud_Computing
  DevOps
}
